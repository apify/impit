/* auto-generated by NAPI-RS */
/* eslint-disable */
export declare class Impit {
  constructor(options?: ImpitOptions | undefined | null)
  /** Fetch a URL with the given options. */
  fetch(url: string, requestInit?: RequestInit | undefined | null): Promise<ImpitResponse>
}
export type ImpitWrapper = Impit

export declare class ImpitResponse {
  status: number
  statusText: string
  headers: Record<string, string>
  ok: boolean
  url: string
  bytes(this: object): Promise<Uint8Array>
  text(this: object): Promise<String>
  json(this: object): Promise<any>
  get body(): ReadableStream<Uint8Array>
}

export declare const enum Browser {
  Chrome = 'Chrome',
  Firefox = 'Firefox'
}

export declare const enum HttpMethod {
  Get = 'GET',
  Post = 'POST',
  Put = 'PUT',
  Delete = 'DELETE',
  Patch = 'PATCH',
  Head = 'HEAD',
  Options = 'OPTIONS'
}

export interface ImpitOptions {
  browser?: Browser
  ignoreTlsErrors?: boolean
  vanillaFallback?: boolean
  proxyUrl?: string
  /** Default timeout for this Impit instance in milliseconds. */
  timeout?: number
  /** Enable HTTP/3 support. */
  http3?: boolean
  /** Follow redirects. */
  followRedirects?: boolean
  /**
   * Maximum number of redirects to follow. Default is `10`.
   *
   * If this number is exceeded, the request will be rejected with an error.
   */
  maxRedirects?: number
}

export interface RequestInit {
  method?: HttpMethod
  headers?: Record<string, string>
  body?: string | Buffer
  /** Request timeout in milliseconds. Overrides the Impit-wide timeout option. */
  timeout?: number
  /** Force the request to use HTTP/3. If the server doesn't expect HTTP/3, the request will fail. */
  forceHttp3?: boolean
}
